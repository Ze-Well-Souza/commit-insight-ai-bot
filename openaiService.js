
import dotenv from "dotenv";
import OpenAI from "openai";

dotenv.config();

// Criar cliente OpenAI com configura√ß√£o de timeout e retry
const openai = new OpenAI({ 
  apiKey: process.env.OPENAI_API_KEY,
  timeout: 60000, // 60 segundos de timeout
  maxRetries: 3   // M√°ximo de 3 tentativas em caso de erro
});

/**
 * Analisa um commit usando a API da OpenAI
 * @param {string} diff - Informa√ß√µes do commit para an√°lise
 * @returns {Promise<string>} An√°lise do commit
 */
export async function analisarCommit(diff) {
  // Verifica√ß√£o obrigat√≥ria da chave API
  if (!process.env.OPENAI_API_KEY) {
    console.error("‚ùå Chave da API OpenAI n√£o configurada");
    return "Erro: Chave da API OpenAI n√£o configurada";
  }

  try {
    console.log("üß† Enviando commit para an√°lise...");
    
    const start = Date.now();
    
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini", // Usando modelo mais r√°pido e econ√¥mico
      messages: [
        {
          role: "system",
          content: 
            "Voc√™ √© um assistente especializado em code review que analisa commits do GitHub. " +
            "Forne√ßa feedback t√©cnico construtivo, identifique poss√≠veis problemas e sugira melhorias."
        },
        {
          role: "user",
          content: `Analise o seguinte commit e forne√ßa uma avalia√ß√£o t√©cnica estruturada:\n\n${diff}`,
        },
      ],
      temperature: 0.3, // Menor temperatura para respostas mais consistentes
      max_tokens: 1000,  // Limitar tamanho da resposta
    });

    const elapsed = ((Date.now() - start) / 1000).toFixed(2);
    
    console.log(`üß† An√°lise conclu√≠da em ${elapsed}s`);
    
    if (completion.choices && completion.choices.length > 0) {
      const resposta = completion.choices[0].message.content;
      console.log("üìù Resposta da IA:", resposta.substring(0, 150) + "...");
      return resposta;
    } else {
      console.error("‚ùå Resposta da API OpenAI vazia ou inv√°lida");
      return "Erro: Resposta da API OpenAI vazia ou inv√°lida";
    }
  } catch (error) {
    if (error.response) {
      console.error(`‚ùå Erro da API OpenAI [${error.response.status}]:`, error.response.data);
      return `Erro da API OpenAI: ${error.response.status} - ${JSON.stringify(error.response.data)}`;
    } else {
      console.error("‚ùå Erro ao chamar a OpenAI:", error.message);
      return `Erro ao chamar a OpenAI: ${error.message}`;
    }
  }
}
